group CsTemplate;

file(Document) ::= <<
using System.Collections.Generic;
using System.ComponentModel;

using Interlace.Pinch.Implementation;

<Document.Protocols:protocol()>
>>

protocol(Protocol) ::= <<
namespace <Protocol.Name>
{
<Protocol.Declarations:declaration()>
}

>>

declaration(Declaration) ::= <<
<Declaration:(Declaration.KindTag)()>

>>

structure(Structure) ::= <<
    public class <Structure.Implementation.Identifier>Factory : IPinchableFactory
    {
        static <Structure.Implementation.Identifier>Factory _instance = new <Structure.Implementation.Identifier>Factory();
        
        public object Create(IPinchDecodingContext context)
        {
            return new <Structure.Implementation.Identifier>(context);
        }
        
        public static IPinchableFactory Instance
        {
            get
            {
                return _instance;
            }
        }
    }
    
    public partial class <Structure.Implementation.Identifier> : IPinchable, INotifyPropertyChanged
    {
        <Structure.NonRemovedMembers:{ m | <m.Implementation.TypeName> <m.Implementation.FieldIdentifier>; }; separator="\r\n">

        <Structure.Members:{ m | static PinchFieldProperties <m.Implementation.FieldIdentifier>Properties = new PinchFieldProperties(<m.Number>, <m.Implementation.AddedInVersion>, <m.Implementation.RemovedInVersion>); }; separator="\r\n">
        
        public <Structure.Implementation.Identifier>()
        {
            <Structure.NonRemovedMembers:structure_field_constructor(); separator="\r\n">
        }
    
        public <Structure.Implementation.Identifier>(IPinchDecodingContext context)
        {
        }
        
        <Structure.NonRemovedMembers:structure_properties(); separator="\r\n\r\n">
        
        int IPinchable.ProtocolVersion
        {
            get 
            {
                return <Structure.Parent.Version>;
            }
        }
        
        protected virtual void OnAdditionalFutureFields(IPinchDecoder decoder)
        {
        }
    
        void IPinchable.Encode(IPinchEncoder encoder)
        {
            encoder.OpenSequence(<Structure.CodingOrderMembers.Count>);
            <Structure.VersionGroupedMembers:structure_member_group_encode(); separator="\r\n">
            
            encoder.CloseSequence();
        }
        
        void IPinchable.Decode(IPinchDecoder decoder)
        {
            int remainingFields = decoder.OpenSequence();
            <if(Structure.Implementation.GenerateOnMissingNewFields)>
            int decodedUpToVersion = 0;
            <endif>
            <Structure.VersionGroupedMembers:structure_member_group_decode(); separator="\r\n">
            
            if (remainingFields > 0) 
            {
                OnAdditionalFutureFields(decoder);
                
                decoder.SkipFields(remainingFields);
            }
            
            decoder.CloseSequence();
        }
        
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void FirePropertyChanged(string propertyName)
        {
            if (PropertyChanged != null) PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion

		<if(Structure.Implementation.IsSurrogate)>
		#region Surrogate Methods
		
		public static <Structure.Implementation.Identifier> ValueToSurrogateOptional(<Structure.Implementation.OptionalSurrogateFor> value)
		{
			if (value != null)
			{
				<Structure.Implementation.Identifier> surrogate = <Structure.Implementation.Identifier>.ValueToSurrogate((<Structure.Implementation.SurrogateFor>)value);

				if (surrogate == null) throw new PinchNullRequiredFieldException();

				return surrogate;
			}
			else
			{
				return null;
			}
		}

		public static <Structure.Implementation.Identifier> ValueToSurrogateRequired(<Structure.Implementation.SurrogateFor> value)
		{
			<Structure.Implementation.Identifier> surrogate = <Structure.Implementation.Identifier>.ValueToSurrogate(value);

			if (surrogate == null) throw new PinchNullRequiredFieldException();

			return surrogate;
		}
		
		public static <Structure.Implementation.OptionalSurrogateFor> SurrogateToValueOptional(<Structure.Implementation.Identifier> surrogate)
		{
			if (surrogate != null)
			{
				return <Structure.Implementation.Identifier>.SurrogateToValue(surrogate);
			}
			else
			{
				return null;
			}
		}

		public static <Structure.Implementation.SurrogateFor> SurrogateToValueRequired(<Structure.Implementation.Identifier> surrogate)
		{
			if (surrogate != null)
			{
				return <Structure.Implementation.Identifier>.SurrogateToValue(surrogate);
			}
			else
			{
				throw new PinchNullRequiredFieldException();
			}
		}
		#endregion
		<endif>
    }

>>

structure_member_action_arguments(Member) ::= <<
<Member.Implementation.FieldIdentifier>Properties
>>

structure_field_constructor(Member) ::= <<
<if(!Member.Implementation.ContainerIsScalar)>
<Member.Implementation.FieldIdentifier> = new <Member.Implementation.TypeName>();
<endif>
>>

structure_member_encode_scalar(Member) ::= <<
<if(Member.Implementation.IsSurrogate)>
encoder.Encode<Member.Implementation.CodecMethodSuffix>(<Member.Implementation.InnerTypeCodecName>.ValueToSurrogate<Member.Implementation.RequiredOptionalModifier>(<if(Member.Implementation.ContainerIsScalar)><Member.Implementation.FieldIdentifier><else>value<endif>), <Member:structure_member_action_arguments()>);
<else>
encoder.Encode<Member.Implementation.CodecMethodSuffix>(<if(Member.Implementation.ContainerIsScalar)><Member.Implementation.FieldIdentifier><else>value<endif>, <Member:structure_member_action_arguments()>);
<endif>
>>

structure_member_encode_list(Member) ::= <<

encoder.OpenSequence(<Member.Implementation.FieldIdentifier>.Count);

foreach (<Member.Implementation.InnerTypeName> value in <Member.Implementation.FieldIdentifier>)
{
	<Member:structure_member_encode_scalar()>
}

encoder.CloseSequence();

>>

structure_member_group_encode(MemberGroup) ::= <<

// Encode fields for version <MemberGroup.Version>:
<MemberGroup.Members:structure_member_encode(); separator="\r\n">
>>

structure_member_encode(Member) ::= <<
<if(Member.IsRemoved)>
encoder.EncodeRemoved();
<else>
<Member:("structure_member_encode_" + Member.Implementation.ContainerTag)()>
<endif>
>>

structure_member_decode_list(Member) ::= <<
int <Member.Implementation.CountVariableName> = decoder.OpenSequence();

<Member.Implementation.FieldIdentifier> = new <Member.Implementation.TypeName>();

for (int i = 0; i \< <Member.Implementation.CountVariableName>; i++)
{
    <Member.Implementation.FieldIdentifier>.Add(<Member:structure_member_decode_expression()>);
}

decoder.CloseSequence();
>>

structure_member_decode_expression(Member) ::= <<
<if(Member.Implementation.IsSurrogate)>
<Member.Implementation.InnerTypeCodecName>.SurrogateToValue<Member.Implementation.RequiredOptionalModifier>((<Member.Implementation.InnerTypeCodecName>)decoder.Decode<Member.Implementation.CodecMethodSuffix>(<Member.Implementation.InnerTypeFactoryName>.Instance, <Member:structure_member_action_arguments()>))
<else>
(<Member.Implementation.InnerTypeName>)decoder.Decode<Member.Implementation.CodecMethodSuffix>(<if(Member.Implementation.IsInnerTypeStructure)><Member.Implementation.InnerTypeFactoryName>.Instance, <endif><Member:structure_member_action_arguments()>)<endif>
>>

structure_member_group_decode(MemberGroup) ::= <<

// Decode members for version <MemberGroup.Version>:
if (remainingFields >= <MemberGroup.Members.Count>)
{
    <MemberGroup.Members:structure_member_decode(); separator="\r\n">

    remainingFields -= <MemberGroup.Members.Count>;
    <if(MemberGroup.Structure.Implementation.GenerateOnMissingNewFields)>
    decodedUpToVersion = <MemberGroup.Version>;
    <endif>
}
else
{
    if (remainingFields != 0) throw new PinchInvalidCodingException();
    <if(MemberGroup.Structure.Implementation.GenerateOnMissingNewFields)>
    
    OnMissingNewFields(decodedUpToVersion, <MemberGroup.Version>);
    <endif>
}
>>

structure_member_decode(Member) ::= <<
<if(Member.IsRemoved)>
decoder.SkipRemoved();
<else>
<if(Member.Implementation.ContainerIsScalar)>
<Member.Implementation.FieldIdentifier> = <Member:structure_member_decode_expression()>;
<else>
<Member:("structure_member_decode_" + Member.Implementation.ContainerTag)()>
<endif>
<endif>
>>

structure_properties(Member) ::= <<
public <Member.Implementation.TypeName> <Member.Implementation.PropertyIdentifier>
{
    get { return <Member.Implementation.FieldIdentifier>; }
    set 
    { 
        <Member.Implementation.FieldIdentifier> = value; 
        
        FirePropertyChanged("<Member.Implementation.PropertyIdentifier>");
    }
}
>>

choice_structure_properties(Member) ::= <<
public <Member.Implementation.TypeName> <Member.Implementation.PropertyIdentifier>
{
    get { return _valueKind == <Member.Parent.Identifier>Kind.<Member.Identifier> ? (<Member.Implementation.TypeName>)_value : null; }
    set 
    { 
        <Member.Parent.Identifier>Kind existingKind = _valueKind;
        
        _value = value; 
        _valueKind = <Member.Parent.Identifier>Kind.<Member.Identifier>;
        
        if (existingKind != _valueKind) FirePropertyChanged(existingKind);
        FirePropertyChanged(_valueKind);
    }
}
>>

enumeration(Enumeration) ::= <<
    public enum <Enumeration.Identifier>
    {
    <Enumeration.Members:enumeration_member(); separator=",\r\n">
    }
    
>>

enumeration_member(Member) ::= <<
    <Member.Identifier> = <Member.Number>
>>

choice(Structure) ::= <<
    public class <Structure.Implementation.Identifier>Factory : IPinchableFactory
    {
        static <Structure.Implementation.Identifier>Factory _instance = new <Structure.Implementation.Identifier>Factory();
        
        public object Create(IPinchDecodingContext context)
        {
            return new <Structure.Implementation.Identifier>(context);
        }
        
        public static IPinchableFactory Instance
        {
            get
            {
                return _instance;
            }
        }
    }
    
    public enum <Structure.Implementation.Identifier>Kind
    {
        None = 0,
        
        <Structure.Members:{ m | <m.Identifier> = <m.Number>, }; separator="\r\n">
    }
    
    public partial class <Structure.Implementation.Identifier> : IPinchable, INotifyPropertyChanged
    {
        object _value;
        <Structure.Implementation.Identifier>Kind _valueKind;
        
        <Structure.Members:{ m | static PinchFieldProperties <m.Implementation.FieldIdentifier>Properties = new PinchFieldProperties(<m.Number>, <m.Implementation.AddedInVersion>, <m.Implementation.RemovedInVersion>); }; separator="\r\n">
        
        <Structure.Members:{ m | public <Structure.Implementation.Identifier>(<m.Implementation.TypeName> value)
\{
    _value = value;
    _valueKind = <Structure.Implementation.Identifier>Kind.<m.Identifier>;
\}

public static implicit operator <Structure.Implementation.Identifier>(<m.Implementation.TypeName> value)
\{
    return new <Structure.Implementation.Identifier>(value);
\}

}; separator="\r\n">
    
        public <Structure.Implementation.Identifier>()
        {
            _value = null;
            _valueKind = <Structure.Implementation.Identifier>Kind.None;
        }
    
        public <Structure.Implementation.Identifier>(IPinchDecodingContext context)
        {
        }
        
        public object Value 
        {
            get { return _value; }
        }
        
        public <Structure.Implementation.Identifier>Kind ValueKind
        {
            get { return _valueKind; }
        }
        
        <Structure.Members:choice_structure_properties(); separator="\r\n\r\n">
        
        int IPinchable.ProtocolVersion
        {
            get 
            {
                return <Structure.Parent.Version>;
            }
        }
        
        public void FirePropertyChanged(<Structure.Implementation.Identifier>Kind kind)
        {
            switch (kind)
            {
                case <Structure.Implementation.Identifier>Kind.None:
                    break;
                    
                <Structure.Members:{ m | case <Structure.Implementation.Identifier>Kind.<m.Identifier>:
    FirePropertyChanged("<m.Identifier>");
    break; 
    }; separator="\r\n">
                default:
                    break;
            }
        }
    
        void IPinchable.Encode(IPinchEncoder encoder)
        {
            encoder.EncodeChoiceMarker((int)_valueKind);
            
            switch (_valueKind)
            {
                case <Structure.Implementation.Identifier>Kind.None:
                    throw new PinchNullRequiredFieldException();
                    
                <Structure.Members:{ m | case <Structure.Implementation.Identifier>Kind.<m.Identifier>:
    encoder.EncodeRequiredStructure((IPinchable)_value, <m:structure_member_action_arguments()>);
    break; 
    }; separator="\r\n">
            }
        }
        
        void IPinchable.Decode(IPinchDecoder decoder)
        {
            _valueKind = (<Structure.Implementation.Identifier>Kind)decoder.DecodeChoiceMarker();
            
            switch (_valueKind)
            {
                <Structure.Members:{ m | case <Structure.Implementation.Identifier>Kind.<m.Identifier>:
    _value = decoder.DecodeRequiredStructure(<m.Implementation.InnerTypeName>Factory.Instance, <m:structure_member_action_arguments()>);
    break; 
    }; separator="\r\n">
                default:
                    throw new PinchInvalidCodingException();
            }
        }
        
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        protected void FirePropertyChanged(string propertyName)
        {
            if (PropertyChanged != null) PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

>>
